{
  "_args": [
    [
      {
        "raw": "typeorm-typedi-extensions",
        "scope": null,
        "escapedName": "typeorm-typedi-extensions",
        "name": "typeorm-typedi-extensions",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/home/roni/Documents/backend/login-backend"
    ]
  ],
  "_from": "typeorm-typedi-extensions@latest",
  "_id": "typeorm-typedi-extensions@0.2.0",
  "_inCache": true,
  "_location": "/typeorm-typedi-extensions",
  "_nodeVersion": "9.5.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/typeorm-typedi-extensions_0.2.0_1522047949934_0.8437837606608174"
  },
  "_npmUser": {
    "name": "pleerock",
    "email": "zarrhost@gmail.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "typeorm-typedi-extensions",
    "scope": null,
    "escapedName": "typeorm-typedi-extensions",
    "name": "typeorm-typedi-extensions",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/typeorm-typedi-extensions/-/typeorm-typedi-extensions-0.2.0.tgz",
  "_shasum": "a3d340a79251a9bcc6c8179ddf9f201eacafaf29",
  "_shrinkwrap": null,
  "_spec": "typeorm-typedi-extensions",
  "_where": "/home/roni/Documents/backend/login-backend",
  "author": {
    "name": "Umed Khudoiberdiev",
    "email": "pleerock.me@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/typeorm/typeorm-typedi-extensions/issues"
  },
  "contributors": [
    {
      "name": "Micha≈Ç Lytek",
      "url": "https://github.com/19majkel94"
    }
  ],
  "dependencies": {},
  "description": "Dependency injection and service container integration with TypeORM using TypeDI library.",
  "devDependencies": {
    "@types/node": "^8.0.31",
    "chai": "^4.1.2",
    "del": "^3.0.0",
    "gulp": "^3.9.1",
    "gulp-mocha": "^4.3.1",
    "gulp-replace": "^0.6.1",
    "gulp-shell": "^0.6.3",
    "gulp-tslint": "^8.1.2",
    "gulpclass": "^0.1.2",
    "mysql": "^2.14.1",
    "reflect-metadata": "^0.1.12",
    "sinon-chai": "^2.13.0",
    "ts-node": "^5.0.0",
    "tslint": "^5.7.0",
    "tslint-stylish": "^2.1.0",
    "typedi": "^0.6.1",
    "typeorm": "^0.1.12",
    "typescript": "2.5.3"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-cC8WMC14CmvmppSWUoCL2yS5VCF8xoQA4H3S7o+6zTry0wxZzez02sAcxwVviZgniV72kR2lOZNKbuajOWdgrA==",
    "shasum": "a3d340a79251a9bcc6c8179ddf9f201eacafaf29",
    "tarball": "https://registry.npmjs.org/typeorm-typedi-extensions/-/typeorm-typedi-extensions-0.2.0.tgz",
    "fileCount": 23,
    "unpackedSize": 27199
  },
  "homepage": "https://github.com/typeorm/typeorm-typedi-extensions#readme",
  "license": "MIT",
  "maintainers": [
    {
      "name": "pleerock",
      "email": "zarrhost@gmail.com"
    }
  ],
  "name": "typeorm-typedi-extensions",
  "optionalDependencies": {},
  "peerDependencies": {
    "typedi": "^0.6.1",
    "typeorm": "^0.1.12"
  },
  "readme": "# TypeDI Service container integration with TypeORM\n\nThis extension for TypeORM provides handy decorators that can be used with [typedi](https://github.com/pleerock/typedi).\n\n## Installation\n\n* Install module:\n\n`npm install typeorm-typedi-extensions --save`\n\n* Install TypeDI:\n\n`npm install typedi --save`\n\n* Configure in your app TypeORM to use TypeDI Container, before you create a connection:\n\n```javascript\nimport \"reflect-metadata\";\nimport {createConnection, useContainer} from \"typeorm\";\nimport {Container} from \"typedi\";\n\nuseContainer(Container);\ncreateConnection({ \n    /// ....\n}); \n```\n\n* That's all, start using decorators!\n\n\n## Usage\n\nAll decorators can be used on properties and constructor arguments, e.g. you can use both\nproperty and constructor injection.\n\n### @InjectConnection\n\nInjects `Connection` from where you can access anything in your connection.\n\nExample using property injection:\n\n```javascript\nimport {Service} from \"typedi\";\nimport {Connection} from \"typeorm\";\nimport {InjectConnection} from \"typeorm-typedi-extensions\";\n\n@Service()\nexport class PostRepository {\n    \n    @InjectConnection()\n    private connection: Connection;\n    \n}\n```\n\nExample using constructor injection:\n\n```javascript\nimport {Service} from \"typedi\";\nimport {Connection} from \"typeorm\";\nimport {InjectConnection} from \"typeorm-typedi-extensions\";\n\n@Service()\nexport class PostRepository {\n    \n    constructor(@InjectConnection() private connection: Connection) {\n    }\n    \n}\n```\n\nOptionally, you can specify a connection name in the decorator parameters.\n\n### @InjectManager\n\nInjects `EntityManager` from where you can access any entity in your connection. \n\nExample using property injection:\n\n```javascript\nimport {Service} from \"typedi\";\nimport {EntityManager} from \"typeorm\";\nimport {InjectManager} from \"typeorm-typedi-extensions\";\n\n@Service()\nexport class PostRepository {\n    \n    @InjectManager()\n    private entityManager: EntityManager;\n    \n}\n```\n\nExample using constructor injection:\n\n```javascript\nimport {Service} from \"typedi\";\nimport {EntityManager} from \"typeorm\";\nimport {InjectManager} from \"typeorm-typedi-extensions\";\n\n@Service()\nexport class PostRepository {\n    \n    constructor(@InjectManager() private entityManager: EntityManager) {\n    }\n    \n}\n```\n\nOptionally, you can specify a connection name in the decorator parameters.\n\n### @InjectRepository\n\nInjects `Repository`, `MongoRepository`, `TreeRepository` or custom repository of some Entity.\nBe aware that the property or param decorated with `@InjectRepository` has to be annotated with repository type!\n\nExample using property injection:\n\n```javascript\nimport {Service} from \"typedi\";\nimport {Repository} from \"typeorm\";\nimport {InjectRepository} from \"typeorm-typedi-extensions\";\nimport \"../entity/Post\";\n\n@Service()\nexport class PostRepository {\n    \n    @InjectRepository(Post)\n    private repository: Repository<Post>;\n    \n}\n```\n\nExample using constructor injection:\n\n```javascript\nimport {Service} from \"typedi\";\nimport {Repository} from \"typeorm\";\nimport {InjectRepository} from \"typeorm-typedi-extensions\";\nimport \"../entity/Post\";\n\n@Service()\nexport class PostRepository {\n    \n    constructor(\n        @InjectRepository(Post)\n        private repository: Repository<Post>\n    ) {}\n    \n}\n```\nOptionally, you can specify a connection name in the decorator parameters:\n\n```ts\n@Service()\nexport class PostRepository {\n    \n    @InjectRepository(Post, \"custom-con-name\")\n    private repository: Repository<Post>;\n    \n}\n```\n\nYou can also inject custom `Repository` of some Entity. \nBe aware that you have to create the class which extends the generic `Repository<T>` and decorate it with `EntityRepository<T>` decorator.\n\nExample using constructor injection:\n\n```javascript\nimport { Service } from \"typedi\";\nimport { Repository, EntityRepository } from \"typeorm\";\nimport { InjectRepository } from \"typeorm-typedi-extensions\";\nimport \"../entity/user\";\n\n// create custom Repository class\n@Service()\n@EntityRepository(User)\nexport class UserRepository extends Repository<User> {\n    \n    public findByEmail(email: string) {\n        return this.findOne({ email });\n    }\n    \n}\n\n@Service()\nexport class PostService {\n\n    // using constructor injection\n    constructor(\n        @InjectRepository()\n        private readonly userRepository: UserRepository,\n    ) {}\n\n    public async userExist(user: User): boolean {\n        return await this.userRepository.findByEmail(user.email) ? true : false;\n    }\n\n}\n```\n\nOptionally, you can specify a connection name in the decorator parameters.\n\n```ts\n@Service()\nexport class PostService {\n    \n    @InjectRepository(\"custom-con-name\")\n    private userRepository: UserRepository;\n    \n}\n```\n\n## Samples\n\nTake a look on samples in [./sample](sample) for examples of usages.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/typeorm/typeorm-typedi-extensions.git"
  },
  "tags": [
    "orm",
    "typescript",
    "typescript-orm",
    "typeorm-typedi-extensions",
    "typeorm-typedi"
  ],
  "version": "0.2.0"
}
